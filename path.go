package hasher

import (
	"os"
	"path/filepath"
)

var (
	chars = [16]byte{
		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
		'a', 'b', 'c', 'd', 'e', 'f',
	}

	strs = [256]string{
		"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
		"10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
		"20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
		"30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
		"40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
		"50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
		"60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
		"70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
		"80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f",
		"90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f",
		"a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af",
		"b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf",
		"c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf",
		"d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df",
		"e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef",
		"f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff",
	}
)

func (u *u) Paths(d uint64) (string, string, string) {
	rv := [12]byte{
		chars[(d&0x0000f00000000000)>>44],
		chars[(d&0x00000f0000000000)>>40],
		chars[(d&0x000000f000000000)>>36],
		chars[(d&0x0000000f00000000)>>32],
		chars[(d&0x00000000f0000000)>>28],
		chars[(d&0x000000000f000000)>>24],
		chars[(d&0x0000000000f00000)>>20],
		chars[(d&0x00000000000f0000)>>16],
		chars[(d&0x000000000000f000)>>12],
		chars[(d&0x0000000000000f00)>>8],
		chars[(d&0x00000000000000f0)>>4],
		chars[(d&0x000000000000000f)>>0],
	}
	return strs[(d&0xff00000000000000)>>56], strs[(d&0x00ff000000000000)>>48], string(rv[:])
}

func (u *u) path(d uint64) []byte {
	rv := []byte{
		chars[(d&0xf000000000000000)>>60],
		chars[(d&0x0f00000000000000)>>56],
		os.PathSeparator,
		chars[(d&0x00f0000000000000)>>52],
		chars[(d&0x000f000000000000)>>48],
		os.PathSeparator,
		chars[(d&0x0000f00000000000)>>44],
		chars[(d&0x00000f0000000000)>>40],
		chars[(d&0x000000f000000000)>>36],
		chars[(d&0x0000000f00000000)>>32],
		chars[(d&0x00000000f0000000)>>28],
		chars[(d&0x000000000f000000)>>24],
		chars[(d&0x0000000000f00000)>>20],
		chars[(d&0x00000000000f0000)>>16],
		chars[(d&0x000000000000f000)>>12],
		chars[(d&0x0000000000000f00)>>8],
		chars[(d&0x00000000000000f0)>>4],
		chars[(d&0x000000000000000f)>>0],
	}
	return rv
}

func (u *u) Path(d uint64) string {
	return string(u.path(d)[:])
}

func (u *u) PathRoot(r string, d uint64) string {
	rv1 := string_to_byte_unsafe(r)
	rv2 := u.path(d)
	rv := make([]byte, len(rv1)+len(rv2))
	copy(rv, rv1)
	copy(rv[len(rv1):], rv2)
	return string(rv[:])
}

func (s *s) Paths(d uint64) (string, string, string) {
	return s.u.Paths(d)
}

func (s *s) Path(d uint64) string {
	return s.u.Path(d)
}

func (s *s) PathRoot(r string, d uint64) string {
	return filepath.Join(r, s.Path(d))
}
